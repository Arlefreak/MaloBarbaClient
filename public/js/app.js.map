{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/js/app.js","src/js/collections/Products.js","src/js/models/Product.js","src/js/views/List.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\nvar $         = window.$;\nvar ENTER_KEY = 13;\nvar ListView  = require('./views/List');\n\n$(function() {\n    new ListView();\n});\n","\"use strict\";\n\nvar $                 = window.$;\nvar Backbone          = window.Backbone;\nvar _                 = window._;\nBackbone.$            = $;\n\nvar Product = require('../models/Product');\n\nmodule.exports = Backbone.Collection.extend({\n  model: Product,\n  localStorage: new Backbone.LocalStorage('todos-backbone'),\n  \n  completed: function() {\n    return this.filter(function( product ) {\n      return product.get('completed');\n    });\n  },\n\n  // Filter down the list to only product items that are still not finished.\n  remaining: function() {\n    return this.without.apply( this, this.completed() );\n  },\n\n  // We keep the Todos in sequential order, despite being saved by unordered\n  // GUID in the database. This generates the next order number for new items.\n  nextOrder: function() {\n    if ( !this.length ) {\n      return 1;\n    }\n    return this.last().get('order') + 1;\n  },\n\n  // Todos are sorted by their original insertion order.\n  comparator: function( product ) {\n    return product.get('order');\n  }\n});\n","\"use strict\";\n\nvar $ = window.$;\nvar Backbone = window.Backbone;\nvar _ = window._; \nBackbone.$ = $;\n\nmodule.exports = Backbone.Model.extend({\n  defaults: {\n    title: '',\n    completed: false\n  },\n\n  toggle: function() {\n    this.save({\n      completed: !this.get('completed')\n    });\n  }\n});\n","\"use strict\";\n\nvar $ = window.$;\nvar Backbone = window.Backbone;\nvar _ = window._; \nBackbone.$ = $;\n\nvar Products = require('../collections/Products')\nvar ENTER_KEY = 13;\n\nmodule.exports = Backbone.View.extend({\n\n  // Instead of generating a new element, bind to the existing skeleton of\n  // the App already present in the HTML.\n  el: '#todoapp',\n\n  // Our template for the line of statistics at the bottom of the app.\n  statsTemplate: _.template( $('#stats-template').html() ),\n\n  // New\n  // Delegated events for creating new items, and clearing completed ones.\n  events: {\n    'keypress #new-todo': 'createOnEnter',\n    'click #clear-completed': 'clearCompleted',\n    'click #toggle-all': 'toggleAllComplete'\n  },\n\n  // At initialization we bind to the relevant events on the `Todos`\n  // collection, when items are added or changed. Kick things off by\n  // loading any preexisting todos that might be saved in *localStorage*.\n  initialize: function() {\n    this.allCheckbox = this.$('#toggle-all')[0];\n    this.$input = this.$('#new-todo');\n    this.$footer = this.$('#footer');\n    this.$main = this.$('#main');\n\n    this.listenTo(Products, 'add', this.addOne);\n    this.listenTo(Products, 'reset', this.addAll);\n\n    // New\n    this.listenTo(Products, 'change:completed', this.filterOne);\n    this.listenTo(Products,'filter', this.filterAll);\n    this.listenTo(Products, 'all', this.render);\n    this.products = new Products();\n    this.products.fetch();\n  },\n\n  // New\n  // Re-rendering the App just means refreshing the statistics -- the rest\n  // of the app doesn't change.\n  render: function() {\n    var completed = Products.completed().length;\n    var remaining = Products.remaining().length;\n\n    if ( Products.length ) {\n      this.$main.show();\n      this.$footer.show();\n\n      this.$footer.html(this.statsTemplate({\n        completed: completed,\n        remaining: remaining\n      }));\n\n      this.$('#filters li a')\n      .removeClass('selected')\n      .filter('[href=\"#/' + ( app.TodoFilter || '' ) + '\"]')\n      .addClass('selected');\n    } else {\n      this.$main.hide();\n      this.$footer.hide();\n    }\n\n    this.allCheckbox.checked = !remaining;\n  },\n\n  // Add a single todo item to the list by creating a view for it, and\n  // appending its element to the `<ul>`.\n  addOne: function( product ) {\n    var view = new app.TodoView({ model: product });\n    $('#todo-list').append( view.render().el );\n  },\n\n  // Add all items in the **Todos** collection at once.\n  addAll: function() {\n    this.$('#todo-list').html('');\n    Products.each(this.addOne, this);\n  },\n\n  // New\n  filterOne : function (product) {\n    product.trigger('visible');\n  },\n\n  // New\n  filterAll : function () {\n    Products.each(this.filterOne, this);\n  },\n\n\n  // New\n  // Generate the attributes for a new Todo item.\n  newAttributes: function() {\n    return {\n      title: this.$input.val().trim(),\n      order: this.products.nextOrder(), \n      completed: false\n    };\n  },\n\n  // New\n  // If you hit return in the main input field, create new Todo model,\n  // persisting it to localStorage.\n  createOnEnter: function( event ) {\n    if ( event.which !== ENTER_KEY || !this.$input.val().trim() ) {\n      return;\n    }\n\n    this.products.create( this.newAttributes() );\n    this.$input.val('');\n  },\n\n  // New\n  // Clear all completed product items, destroying their models.\n  clearCompleted: function() {\n    _.invoke(Products.completed(), 'destroy');\n    return false;\n  },\n\n  // New\n  toggleAllComplete: function() {\n    var completed = this.allCheckbox.checked;\n\n    Products.each(function( product ) {\n      product.save({\n        'completed': completed\n      });\n    });\n  }\n});\n"]}